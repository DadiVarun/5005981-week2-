Exercise 1: Configuring a Basic Spring Application
Step 1: Set Up a Spring Project
Create a Maven project named LibraryManagement

In your IDE, create a new Maven project named LibraryManagement.
Add Spring Core dependencies in the pom.xml file

CODE
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.library</groupId>
    <artifactId>LibraryManagement</artifactId>
    <version>1.0-SNAPSHOT</version>
    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.3.9</version>
        </dependency>
    </dependencies>
</project>
Step 2: Configure the Application Context
Create an XML configuration file named applicationContext.xml in the src/main/resources directory

CODE
<!-- src/main/resources/applicationContext.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    
    <!-- Define BookRepository bean -->
    <bean id="bookRepository" class="com.library.repository.BookRepository" />

    <!-- Define BookService bean and inject BookRepository -->
    <bean id="bookService" class="com.library.service.BookService">
        <property name="bookRepository" ref="bookRepository" />
    </bean>
</beans>
Step 3: Define Service and Repository Classes
Create a package com.library.service and add a class BookService

java
CODE
// src/main/java/com/library/service/BookService.java
package com.library.service;

import com.library.repository.BookRepository;

public class BookService {
    private BookRepository bookRepository;

    public void setBookRepository(BookRepository bookRepository) {
        this.bookRepository = bookRepository;
    }

    public void performService() {
        System.out.println("Performing book service...");
        bookRepository.performRepositoryAction();
    }
}
Create a package com.library.repository and add a class BookRepository

java
CODE
// src/main/java/com/library/repository/BookRepository.java
package com.library.repository;

public class BookRepository {
    public void performRepositoryAction() {
        System.out.println("Performing repository action...");
    }
}
Step 4: Run the Application
Create a main class to load the Spring context and test the configuration

java
CODE
// src/main/java/com/library/LibraryManagementApplication.java
package com.library;

import com.library.service.BookService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class LibraryManagementApplication {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
        BookService bookService = context.getBean(BookService.class);
        bookService.performService();
    }
}
Exercise 2: Implementing Dependency Injection
Step 1: Modify the XML Configuration
Update applicationContext.xml to wire BookRepository into BookService

(This step was already accomplished in Exercise 1, Step 2.)

Step 2: Update the BookService Class
Ensure that BookService class has a setter method for BookRepository

(This step was already accomplished in Exercise 1, Step 3.)

Step 3: Test the Configuration
Run the LibraryManagementApplication main class to verify the dependency injection

(This step was already accomplished in Exercise 1, Step 4.)

Exercise 3: Implementing Logging with Spring AOP
Step 1: Add Spring AOP Dependency
Update pom.xml to include Spring AOP dependency

xml
CODE
<dependencies>
    <!-- Spring Core Dependency -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>5.3.9</version>
    </dependency>
    <!-- Spring AOP Dependency -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aop</artifactId>
        <version>5.3.9</version>
    </dependency>
</dependencies>
Step 2: Create an Aspect for Logging
Create a package com.library.aspect and add a class LoggingAspect

java
CODE
// src/main/java/com/library/aspect/LoggingAspect.java
package com.library.aspect;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class LoggingAspect {
    
    @Before("execution(* com.library.service.BookService.*(..))")
    public void beforeMethod() {
        System.out.println("Before method execution");
    }

    @After("execution(* com.library.service.BookService.*(..))")
    public void afterMethod() {
        System.out.println("After method execution");
    }
}
Step 3: Enable AspectJ Support
Update applicationContext.xml to enable AspectJ support and register the aspect

xml
CODE
<!-- src/main/resources/applicationContext.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    
    <!-- Define BookRepository bean -->
    <bean id="bookRepository" class="com.library.repository.BookRepository" />

    <!-- Define BookService bean and inject BookRepository -->
    <bean id="bookService" class="com.library.service.BookService">
        <property name="bookRepository" ref="bookRepository" />
    </bean>

    <!-- Enable AspectJ auto-proxying -->
    <aop:aspectj-autoproxy />

    <!-- Define LoggingAspect bean -->
    <bean id="loggingAspect" class="com.library.aspect.LoggingAspect" />
</beans>
Step 4: Test the Aspect
Run the LibraryManagementApplication main class and observe the console for log messages indicating method execution times
Exercise 4: Creating and Configuring a Maven Project
Step 1: Create a New Maven Project
Create a new Maven project named LibraryManagement

(This step was already accomplished in Exercise 1, Step 1.)

Step 2: Add Spring Dependencies in pom.xml
Include dependencies for Spring Context, Spring AOP, and Spring WebMVC

xml
CODE
<dependencies>
    <!-- Spring Core Dependency -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>5.3.9</version>
    </dependency>
    <!-- Spring AOP Dependency -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aop</artifactId>
        <version>5.3.9</version>
    </dependency>
    <!-- Spring WebMVC Dependency -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.3.9</version>
    </dependency>
</dependencies>
Step 3: Configure Maven Plugins
Configure the Maven Compiler Plugin for Java version 1.8 in the pom.xml file

xml
CODE
<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </plugins>
</build>

Exercise 5: Configuring the Spring IoC Container
Step 1: Create Spring Configuration File
Create an XML configuration file named applicationContext.xml in the src/main/resources directory

(This step was already accomplished in Exercise 1, Step 2.)

Step 2: Update the BookService Class
Ensure that the BookService class has a setter method for BookRepository
Exercise 5: Configuring the Spring IoC Container (continued)
Step 3: Run the Application
Create a main class to load the Spring context and test the configuration

java
CODE
// src/main/java/com/library/LibraryManagementApplication.java
package com.library;

import com.library.service.BookService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class LibraryManagementApplication {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
        BookService bookService = context.getBean(BookService.class);
        bookService.performService();
    }
}
Exercise 6: Configuring Beans with Annotations
Step 1: Enable Component Scanning
Update applicationContext.xml to include component scanning for the com.library package

xml
CODE
<!-- src/main/resources/applicationContext.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    
    <!-- Enable component scanning -->
    <context:component-scan base-package="com.library" />

    <!-- Enable AspectJ auto-proxying -->
    <aop:aspectj-autoproxy />
</beans>
Step 2: Annotate Classes
Use @Service annotation for the BookService class

java
CODE
// src/main/java/com/library/service/BookService.java
package com.library.service;

import com.library.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class BookService {
    private BookRepository bookRepository;

    @Autowired
    public void setBookRepository(BookRepository bookRepository) {
        this.bookRepository = bookRepository;
    }

    public void performService() {
        System.out.println("Performing book service...");
        bookRepository.performRepositoryAction();
    }
}
Use @Repository annotation for the BookRepository class

java
CODE
// src/main/java/com/library/repository/BookRepository.java
package com.library.repository;

import org.springframework.stereotype.Repository;

@Repository
public class BookRepository {
    public void performRepositoryAction() {
        System.out.println("Performing repository action...");
    }
}
Step 3: Test the Configuration
Run the LibraryManagementApplication main class to verify the annotation-based configuration

(Use the same LibraryManagementApplication class as before.)

Exercise 7: Implementing Constructor and Setter Injection
Step 1: Configure Constructor Injection
Update applicationContext.xml to configure constructor injection for BookService

xml
CODE
<!-- src/main/resources/applicationContext.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    
    <!-- Enable component scanning -->
    <context:component-scan base-package="com.library" />

    <!-- Enable AspectJ auto-proxying -->
    <aop:aspectj-autoproxy />

    <!-- Define BookRepository bean -->
    <bean id="bookRepository" class="com.library.repository.BookRepository" />

    <!-- Define BookService bean with constructor injection -->
    <bean id="bookService" class="com.library.service.BookService">
        <constructor-arg ref="bookRepository" />
    </bean>
</beans>
Step 2: Configure Setter Injection
Ensure that the BookService class has a setter method for BookRepository

(This step was already accomplished in Exercise 6, Step 2.)

Step 3: Test the Injection
Run the LibraryManagementApplication main class to verify both constructor and setter injection

(Use the same LibraryManagementApplication class as before.)

Exercise 8: Implementing Basic AOP with Spring
Step 1: Define an Aspect
Create a package com.library.aspect and add a class LoggingAspect

(This was already done in Exercise 3, Step 2.)

Step 2: Create Advice Methods
Define advice methods in LoggingAspect for logging before and after method execution

(This was already done in Exercise 3, Step 2.)

Step 3: Configure the Aspect
Update applicationContext.xml to register the aspect and enable AspectJ auto-proxying

(This was already done in Exercise 3, Step 3.)

Step 4: Test the Aspect
Run the LibraryManagementApplication main class and observe the console for log messages indicating method execution times

(Use the same LibraryManagementApplication class as before.)

Exercise 9: Creating a Spring Boot Application
Step 1: Create a Spring Boot Project
Use Spring Initializr to create a new Spring Boot project named LibraryManagement

Go to Spring Initializr
Set the project name to LibraryManagement
Add dependencies: Spring Web, Spring Data JPA, H2 Database
Step 2: Add Dependencies
Include dependencies for Spring Web, Spring Data JPA, and H2 Database

xml
CODE
<dependencies>
    <!-- Spring Web Dependency -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- Spring Data JPA Dependency -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <!-- H2 Database Dependency -->
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <scope>runtime</scope>
    </dependency>
</dependencies>
Step 3: Create Application Properties
Configure database connection properties in application.properties

properties
CODE
# src/main/resources/application.properties
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
Step 4: Define Entities and Repositories
Create Book entity and BookRepository interface

java
CODE
// src/main/java/com/library/model/Book.java
package com.library.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
    private String author;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }
    public String getAuthor() { return author; }
    public void setAuthor(String author) { this.author = author; }
}
java
CODE
// src/main/java/com/library/repository/BookRepository.java
package com.library.repository;

import com.library.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BookRepository extends JpaRepository<Book, Long> {
}
Step 5: Create a REST Controller
Create BookController class to handle CRUD operations

java
CODE
// src/main/java/com/library/controller/BookController.java
package com.library.controller;

import com.library.model.Book;
import com.library.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/books")
public class BookController {

    @Autowired
    private BookRepository bookRepository;

    @GetMapping
    public List<Book> getAllBooks() {
        return bookRepository.findAll();
    }

    @PostMapping
    public ResponseEntity<Book> createBook(@RequestBody Book book) {
        Book savedBook = bookRepository.save(book);
        return new ResponseEntity<>(savedBook, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Book> getBookById(@PathVariable Long id) {
        return bookRepository.findById(id)
                .map(book -> new ResponseEntity<>(book, HttpStatus.OK))